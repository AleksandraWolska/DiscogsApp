
// // CreateRelease adds a new release to the in-memory database
// func (imc *InMemoryClient) CreateRelease(release models.Release) (int, error) {
// 	imc.mu.Lock()
// 	defer imc.mu.Unlock()

// 	release.ID = imc.nextID
// 	imc.releases[imc.nextID] = release
// 	imc.nextID++
// 	imc.printState()
// 	return release.ID, nil
// }

// // GetRelease retrieves a release by ID
// func (imc *InMemoryClient) GetRelease(id int) (models.Release, error) {
// 	imc.mu.Lock()
// 	defer imc.mu.Unlock()

// 	release, exists := imc.releases[id]
// 	if !exists {
// 		return models.Release{}, errors.New("release not found")
// 	}
// 	imc.printState()
// 	return release, nil
// }

// // UpdateRelease updates an existing release
// func (imc *InMemoryClient) UpdateRelease(release models.Release) error {
// 	imc.mu.Lock()
// 	defer imc.mu.Unlock()

// 	if _, exists := imc.releases[release.ID]; !exists {
// 		return errors.New("release not found")
// 	}
// 	imc.releases[release.ID] = release
// 	imc.printState()
// 	return nil
// }

// // DeleteRelease removes a release from the in-memory database
// func (imc *InMemoryClient) DeleteRelease(id int) error {
// 	imc.mu.Lock()
// 	defer imc.mu.Unlock()

// 	if _, exists := imc.releases[id]; !exists {
// 		return errors.New("release not found")
// 	}
// 	delete(imc.releases, id)
// 	imc.printState()
// 	return nil
// }

// // CreateArtist adds a new artist to the in-memory database
// func (imc *InMemoryClient) CreateArtist(artist models.Artist) (int, error) {
// 	imc.mu.Lock()
// 	defer imc.mu.Unlock()

// 	artist.ID = imc.nextID
// 	imc.artists[imc.nextID] = artist
// 	imc.nextID++
// 	imc.printState()
// 	return artist.ID, nil
// }

// // GetArtist retrieves an artist by ID
// func (imc *InMemoryClient) GetArtist(id int) (models.Artist, error) {
// 	imc.mu.Lock()
// 	defer imc.mu.Unlock()

// 	artist, exists := imc.artists[id]
// 	if !exists {
// 		return models.Artist{}, errors.New("artist not found")
// 	}
// 	imc.printState()
// 	return artist, nil
// }